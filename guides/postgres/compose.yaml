name: postgres-stack

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: postgres

services:
  postgres:
    image: postgres:18-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${LAB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LAB_POSTGRES_PASSWORD}
      POSTGRES_DB: ${LAB_POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - default
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LAB_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Optional: Resource limits for production-like constraints
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  postgres-client:
    image: postgres:18-alpine
    container_name: postgres-client
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - default
    environment:
      POSTGRES_USER: ${LAB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LAB_POSTGRES_PASSWORD}
      POSTGRES_DB: ${LAB_POSTGRES_DB}
    # Keep container running idly for exec access
    command: ["tail", "-f", "/dev/null"]

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PGADMIN_DEFAULT_EMAIL=${LAB_PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${LAB_PGADMIN_DEFAULT_PASSWORD}
    ports:
      - 8080:80
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/login"]
      interval: 10s
      timeout: 5s
      retries: 5